/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface GelatoVRFConsumerBaseInterface extends utils.Interface {
  functions: {
    "fulfillRandomness(uint256,bytes)": FunctionFragment;
    "requestPending(uint256)": FunctionFragment;
    "requestedHash(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fulfillRandomness"
      | "requestPending"
      | "requestedHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fulfillRandomness",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPending",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestedHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestedHash",
    data: BytesLike
  ): Result;

  events: {
    "RequestedRandomness(uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestedRandomness"): EventFragment;
}

export interface RequestedRandomnessEventObject {
  round: BigNumber;
  data: string;
}
export type RequestedRandomnessEvent = TypedEvent<
  [BigNumber, string],
  RequestedRandomnessEventObject
>;

export type RequestedRandomnessEventFilter =
  TypedEventFilter<RequestedRandomnessEvent>;

export interface GelatoVRFConsumerBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GelatoVRFConsumerBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfillRandomness(
      randomness: PromiseOrValue<BigNumberish>,
      dataWithRound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestPending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestedHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  fulfillRandomness(
    randomness: PromiseOrValue<BigNumberish>,
    dataWithRound: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestPending(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestedHash(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    fulfillRandomness(
      randomness: PromiseOrValue<BigNumberish>,
      dataWithRound: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestPending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestedHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "RequestedRandomness(uint256,bytes)"(
      round?: null,
      data?: null
    ): RequestedRandomnessEventFilter;
    RequestedRandomness(
      round?: null,
      data?: null
    ): RequestedRandomnessEventFilter;
  };

  estimateGas: {
    fulfillRandomness(
      randomness: PromiseOrValue<BigNumberish>,
      dataWithRound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestPending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestedHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfillRandomness(
      randomness: PromiseOrValue<BigNumberish>,
      dataWithRound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestPending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestedHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
