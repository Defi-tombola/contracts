/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface LotteryProviderInterface extends utils.Interface {
  functions: {
    "buyTicket(bytes32,uint32)": FunctionFragment;
    "cancelLottery(bytes32)": FunctionFragment;
    "createLottery(bytes32,address,uint128,uint128,uint32)": FunctionFragment;
    "fulfillRandomness(uint256,bytes)": FunctionFragment;
    "getOperator()": FunctionFragment;
    "house()": FunctionFragment;
    "initialize()": FunctionFragment;
    "lotteries(bytes32)": FunctionFragment;
    "numberOfTicketsByAddress(bytes32,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestCloseLottery(bytes32)": FunctionFragment;
    "requestPending(uint256)": FunctionFragment;
    "requestedHash(uint256)": FunctionFragment;
    "setHouse(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTicket"
      | "cancelLottery"
      | "createLottery"
      | "fulfillRandomness"
      | "getOperator"
      | "house"
      | "initialize"
      | "lotteries"
      | "numberOfTicketsByAddress"
      | "owner"
      | "proxiableUUID"
      | "recoverERC20"
      | "renounceOwnership"
      | "requestCloseLottery"
      | "requestPending"
      | "requestedHash"
      | "setHouse"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLottery",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLottery",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomness",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "house", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteries",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTicketsByAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCloseLottery",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPending",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestedHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHouse",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "house", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lotteries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTicketsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCloseLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHouse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FeeCollected(address,uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "LotteryCanceled(bytes32)": EventFragment;
    "LotteryClosed(bytes32)": EventFragment;
    "LotteryNumberGenerated(address,uint256)": EventFragment;
    "LotteryOpened(bytes32,uint128,uint128,uint32)": EventFragment;
    "LotteryProviderUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestedRandomness(uint256,bytes)": EventFragment;
    "TicketBought(bytes32,address,uint32)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WinnerPaid(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryNumberGenerated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryProviderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedRandomness"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerPaid"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface FeeCollectedEventObject {
  collector: string;
  amount: BigNumber;
}
export type FeeCollectedEvent = TypedEvent<
  [string, BigNumber],
  FeeCollectedEventObject
>;

export type FeeCollectedEventFilter = TypedEventFilter<FeeCollectedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LotteryCanceledEventObject {
  lottery_id: string;
}
export type LotteryCanceledEvent = TypedEvent<
  [string],
  LotteryCanceledEventObject
>;

export type LotteryCanceledEventFilter = TypedEventFilter<LotteryCanceledEvent>;

export interface LotteryClosedEventObject {
  lottery_id: string;
}
export type LotteryClosedEvent = TypedEvent<[string], LotteryClosedEventObject>;

export type LotteryClosedEventFilter = TypedEventFilter<LotteryClosedEvent>;

export interface LotteryNumberGeneratedEventObject {
  requester: string;
  rNumber: BigNumber;
}
export type LotteryNumberGeneratedEvent = TypedEvent<
  [string, BigNumber],
  LotteryNumberGeneratedEventObject
>;

export type LotteryNumberGeneratedEventFilter =
  TypedEventFilter<LotteryNumberGeneratedEvent>;

export interface LotteryOpenedEventObject {
  lottery_id: string;
  ticket_price: BigNumber;
  fee_amount_per_ticket: BigNumber;
  max_tickets: number;
}
export type LotteryOpenedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  LotteryOpenedEventObject
>;

export type LotteryOpenedEventFilter = TypedEventFilter<LotteryOpenedEvent>;

export interface LotteryProviderUpdatedEventObject {
  lottery_provider: string;
}
export type LotteryProviderUpdatedEvent = TypedEvent<
  [string],
  LotteryProviderUpdatedEventObject
>;

export type LotteryProviderUpdatedEventFilter =
  TypedEventFilter<LotteryProviderUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestedRandomnessEventObject {
  round: BigNumber;
  data: string;
}
export type RequestedRandomnessEvent = TypedEvent<
  [BigNumber, string],
  RequestedRandomnessEventObject
>;

export type RequestedRandomnessEventFilter =
  TypedEventFilter<RequestedRandomnessEvent>;

export interface TicketBoughtEventObject {
  lottery_id: string;
  buyer: string;
  tickets: number;
}
export type TicketBoughtEvent = TypedEvent<
  [string, string, number],
  TicketBoughtEventObject
>;

export type TicketBoughtEventFilter = TypedEventFilter<TicketBoughtEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WinnerPaidEventObject {
  lottery_id: string;
  winner: string;
  amount: BigNumber;
}
export type WinnerPaidEvent = TypedEvent<
  [string, string, BigNumber],
  WinnerPaidEventObject
>;

export type WinnerPaidEventFilter = TypedEventFilter<WinnerPaidEvent>;

export interface LotteryProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LotteryProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTicket(
      lottery_id: PromiseOrValue<BytesLike>,
      ticket_count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      _entrance_token_address: PromiseOrValue<string>,
      _ticket_price: PromiseOrValue<BigNumberish>,
      _fee_amount_per_ticket: PromiseOrValue<BigNumberish>,
      _max_tickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillRandomness(
      randomness: PromiseOrValue<BigNumberish>,
      dataWithRound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOperator(overrides?: CallOverrides): Promise<[string]>;

    house(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lotteries(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, number, number, boolean, string] & {
        entrance_token_address: string;
        fee_amount_per_ticket: BigNumber;
        ticket_price: BigNumber;
        max_tickets: number;
        sold_tickets: number;
        is_active: boolean;
        winner: string;
      }
    >;

    numberOfTicketsByAddress(
      lottery_id: PromiseOrValue<BytesLike>,
      participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      token_address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestCloseLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestPending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestedHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setHouse(
      _houseAddrs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  buyTicket(
    lottery_id: PromiseOrValue<BytesLike>,
    ticket_count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelLottery(
    lottery_id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLottery(
    lottery_id: PromiseOrValue<BytesLike>,
    _entrance_token_address: PromiseOrValue<string>,
    _ticket_price: PromiseOrValue<BigNumberish>,
    _fee_amount_per_ticket: PromiseOrValue<BigNumberish>,
    _max_tickets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillRandomness(
    randomness: PromiseOrValue<BigNumberish>,
    dataWithRound: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOperator(overrides?: CallOverrides): Promise<string>;

  house(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lotteries(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, number, number, boolean, string] & {
      entrance_token_address: string;
      fee_amount_per_ticket: BigNumber;
      ticket_price: BigNumber;
      max_tickets: number;
      sold_tickets: number;
      is_active: boolean;
      winner: string;
    }
  >;

  numberOfTicketsByAddress(
    lottery_id: PromiseOrValue<BytesLike>,
    participant: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    token_address: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestCloseLottery(
    lottery_id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestPending(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestedHash(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setHouse(
    _houseAddrs: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    buyTicket(
      lottery_id: PromiseOrValue<BytesLike>,
      ticket_count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      _entrance_token_address: PromiseOrValue<string>,
      _ticket_price: PromiseOrValue<BigNumberish>,
      _fee_amount_per_ticket: PromiseOrValue<BigNumberish>,
      _max_tickets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillRandomness(
      randomness: PromiseOrValue<BigNumberish>,
      dataWithRound: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOperator(overrides?: CallOverrides): Promise<string>;

    house(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    lotteries(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, number, number, boolean, string] & {
        entrance_token_address: string;
        fee_amount_per_ticket: BigNumber;
        ticket_price: BigNumber;
        max_tickets: number;
        sold_tickets: number;
        is_active: boolean;
        winner: string;
      }
    >;

    numberOfTicketsByAddress(
      lottery_id: PromiseOrValue<BytesLike>,
      participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      token_address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestCloseLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestPending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestedHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setHouse(
      _houseAddrs: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "FeeCollected(address,uint256)"(
      collector?: PromiseOrValue<string> | null,
      amount?: null
    ): FeeCollectedEventFilter;
    FeeCollected(
      collector?: PromiseOrValue<string> | null,
      amount?: null
    ): FeeCollectedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LotteryCanceled(bytes32)"(
      lottery_id?: PromiseOrValue<BytesLike> | null
    ): LotteryCanceledEventFilter;
    LotteryCanceled(
      lottery_id?: PromiseOrValue<BytesLike> | null
    ): LotteryCanceledEventFilter;

    "LotteryClosed(bytes32)"(
      lottery_id?: PromiseOrValue<BytesLike> | null
    ): LotteryClosedEventFilter;
    LotteryClosed(
      lottery_id?: PromiseOrValue<BytesLike> | null
    ): LotteryClosedEventFilter;

    "LotteryNumberGenerated(address,uint256)"(
      requester?: PromiseOrValue<string> | null,
      rNumber?: null
    ): LotteryNumberGeneratedEventFilter;
    LotteryNumberGenerated(
      requester?: PromiseOrValue<string> | null,
      rNumber?: null
    ): LotteryNumberGeneratedEventFilter;

    "LotteryOpened(bytes32,uint128,uint128,uint32)"(
      lottery_id?: PromiseOrValue<BytesLike> | null,
      ticket_price?: null,
      fee_amount_per_ticket?: null,
      max_tickets?: null
    ): LotteryOpenedEventFilter;
    LotteryOpened(
      lottery_id?: PromiseOrValue<BytesLike> | null,
      ticket_price?: null,
      fee_amount_per_ticket?: null,
      max_tickets?: null
    ): LotteryOpenedEventFilter;

    "LotteryProviderUpdated(address)"(
      lottery_provider?: PromiseOrValue<string> | null
    ): LotteryProviderUpdatedEventFilter;
    LotteryProviderUpdated(
      lottery_provider?: PromiseOrValue<string> | null
    ): LotteryProviderUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RequestedRandomness(uint256,bytes)"(
      round?: null,
      data?: null
    ): RequestedRandomnessEventFilter;
    RequestedRandomness(
      round?: null,
      data?: null
    ): RequestedRandomnessEventFilter;

    "TicketBought(bytes32,address,uint32)"(
      lottery_id?: PromiseOrValue<BytesLike> | null,
      buyer?: PromiseOrValue<string> | null,
      tickets?: null
    ): TicketBoughtEventFilter;
    TicketBought(
      lottery_id?: PromiseOrValue<BytesLike> | null,
      buyer?: PromiseOrValue<string> | null,
      tickets?: null
    ): TicketBoughtEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "WinnerPaid(bytes32,address,uint256)"(
      lottery_id?: PromiseOrValue<BytesLike> | null,
      winner?: PromiseOrValue<string> | null,
      amount?: null
    ): WinnerPaidEventFilter;
    WinnerPaid(
      lottery_id?: PromiseOrValue<BytesLike> | null,
      winner?: PromiseOrValue<string> | null,
      amount?: null
    ): WinnerPaidEventFilter;
  };

  estimateGas: {
    buyTicket(
      lottery_id: PromiseOrValue<BytesLike>,
      ticket_count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      _entrance_token_address: PromiseOrValue<string>,
      _ticket_price: PromiseOrValue<BigNumberish>,
      _fee_amount_per_ticket: PromiseOrValue<BigNumberish>,
      _max_tickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillRandomness(
      randomness: PromiseOrValue<BigNumberish>,
      dataWithRound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOperator(overrides?: CallOverrides): Promise<BigNumber>;

    house(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lotteries(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfTicketsByAddress(
      lottery_id: PromiseOrValue<BytesLike>,
      participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      token_address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestCloseLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestPending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestedHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setHouse(
      _houseAddrs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTicket(
      lottery_id: PromiseOrValue<BytesLike>,
      ticket_count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      _entrance_token_address: PromiseOrValue<string>,
      _ticket_price: PromiseOrValue<BigNumberish>,
      _fee_amount_per_ticket: PromiseOrValue<BigNumberish>,
      _max_tickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillRandomness(
      randomness: PromiseOrValue<BigNumberish>,
      dataWithRound: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    house(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lotteries(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfTicketsByAddress(
      lottery_id: PromiseOrValue<BytesLike>,
      participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      token_address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestCloseLottery(
      lottery_id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestPending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestedHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setHouse(
      _houseAddrs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
