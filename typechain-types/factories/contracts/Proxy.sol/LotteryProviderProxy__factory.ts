/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LotteryProviderProxy,
  LotteryProviderProxyInterface,
} from "../../../contracts/Proxy.sol/LotteryProviderProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60406080815234610212576103f68038038061001a81610216565b92833981019082818303126102125780516001600160a01b03811690818103610212576020838101516001600160401b039491939185821161021257019085601f83011215610212578151916100776100728461023b565b610216565b92808452858401978682840101116102125787866100959301610256565b823b156101b8577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28051158015906101b1575b61010e575b855160cb908161032b8239f35b855193606085019081118582101761019d578652602784527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c83850152660819985a5b195960ca1b8487015251610189945f918291845af4903d15610194573d61017a6100728261023b565b9081525f81943d92013e610277565b505f80808080610101565b60609250610277565b634e487b7160e01b5f52604160045260245ffd5b505f6100fc565b865162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761019d57604052565b6001600160401b03811161019d57601f01601f191660200190565b5f5b8381106102675750505f910152565b8181015183820152602001610258565b919290156102d9575081511561028b575090565b3b156102945790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156102ec5750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261031c8151809281602486015260208686019101610256565b601f01601f19168101030190fdfe608060405236156051577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff35b3d5ffd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff3fea26469706673582212208fa0f164cce4bf9af0587c1305e3882719f9470408e28cb0584d25853d46954964736f6c63430008160033";

type LotteryProviderProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryProviderProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LotteryProviderProxy__factory extends ContractFactory {
  constructor(...args: LotteryProviderProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _logic: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LotteryProviderProxy> {
    return super.deploy(
      _logic,
      _data,
      overrides || {}
    ) as Promise<LotteryProviderProxy>;
  }
  override getDeployTransaction(
    _logic: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_logic, _data, overrides || {});
  }
  override attach(address: string): LotteryProviderProxy {
    return super.attach(address) as LotteryProviderProxy;
  }
  override connect(signer: Signer): LotteryProviderProxy__factory {
    return super.connect(signer) as LotteryProviderProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryProviderProxyInterface {
    return new utils.Interface(_abi) as LotteryProviderProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LotteryProviderProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LotteryProviderProxy;
  }
}
