{
  "address": "0x05f40DaB8365E4d5F8147cB65B60bF57C665BD2a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operatorAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        }
      ],
      "name": "LotteryCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        }
      ],
      "name": "LotteryClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rNumber",
          "type": "uint256"
        }
      ],
      "name": "LotteryNumberGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "ticket_price",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "fee_amount_per_ticket",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "max_tickets",
          "type": "uint32"
        }
      ],
      "name": "LotteryOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lottery_provider",
          "type": "address"
        }
      ],
      "name": "LotteryProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RequestedRandomness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tickets",
          "type": "uint32"
        }
      ],
      "name": "TicketBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WinnerPaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "ticket_count",
          "type": "uint32"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        }
      ],
      "name": "cancelLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_entrance_token_address",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_ticket_price",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_fee_amount_per_ticket",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "_max_tickets",
          "type": "uint32"
        }
      ],
      "name": "createLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "dataWithRound",
          "type": "bytes"
        }
      ],
      "name": "fulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "house",
      "outputs": [
        {
          "internalType": "contract IHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lotteries",
      "outputs": [
        {
          "internalType": "address",
          "name": "entrance_token_address",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "fee_amount_per_ticket",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "ticket_price",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "max_tickets",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sold_tickets",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "is_active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "numberOfTicketsByAddress",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "lottery_id",
          "type": "bytes32"
        }
      ],
      "name": "requestCloseLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddrs",
          "type": "address"
        }
      ],
      "name": "setHouse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3979e37d94ffb26e9eb29d83d809d551b4287e9c6c33f3a56d17c2c141b3191b",
  "receipt": {
    "to": null,
    "from": "0x306f9373E3f4dB87f51057F04F1FCBd7658f4e08",
    "contractAddress": "0x05f40DaB8365E4d5F8147cB65B60bF57C665BD2a",
    "transactionIndex": 55,
    "gasUsed": "1895915",
    "logsBloom": "0x
    "blockHash": "0xc79fd81a4a0dda9a1e3e7c0a6f47dc99a59af14866f72aae45432b28110c5eaf",
    "transactionHash": "0x3979e37d94ffb26e9eb29d83d809d551b4287e9c6c33f3a56d17c2c141b3191b",
    "logs": [],
    "blockNumber": 4878395,
    "cumulativeGasUsed": "8937072",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9E32efeC32A70143B6c5198e47DbdD7656f2173E"
  ],
  "numDeployments": 1,
  "solcInputHash": "2b89fe068d5ab1c1807de9a3bce98387",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"}],\"name\":\"LotteryCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"}],\"name\":\"LotteryClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rNumber\",\"type\":\"uint256\"}],\"name\":\"LotteryNumberGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"ticket_price\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"fee_amount_per_ticket\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"max_tickets\",\"type\":\"uint32\"}],\"name\":\"LotteryOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lottery_provider\",\"type\":\"address\"}],\"name\":\"LotteryProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tickets\",\"type\":\"uint32\"}],\"name\":\"TicketBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinnerPaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"ticket_count\",\"type\":\"uint32\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"}],\"name\":\"cancelLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_entrance_token_address\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_ticket_price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_fee_amount_per_ticket\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"_max_tickets\",\"type\":\"uint32\"}],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dataWithRound\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"house\",\"outputs\":[{\"internalType\":\"contract IHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lotteries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"entrance_token_address\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"fee_amount_per_ticket\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ticket_price\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"max_tickets\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sold_tickets\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"numberOfTicketsByAddress\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lottery_id\",\"type\":\"bytes32\"}],\"name\":\"requestCloseLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddrs\",\"type\":\"address\"}],\"name\":\"setHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RequestedRandomness(uint256,bytes)\":{\"params\":{\"data\":\"Additional data associated with the request.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"fulfillRandomness(uint256,bytes)\":{\"params\":{\"dataWithRound\":\"Additional data provided by Gelato VRF containing request details.\",\"randomness\":\"The random number generated by Gelato VRF.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"RequestedRandomness(uint256,bytes)\":{\"notice\":\"Event emitted when a randomness request is made.\"}},\"kind\":\"user\",\"methods\":{\"fulfillRandomness(uint256,bytes)\":{\"notice\":\"Callback function used by Gelato VRF to return the random number. The randomness is derived by hashing the provided randomness with the request ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryProvider.sol\":\"LotteryProvider\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x85cc5aca68692044586dc5ca19a9868d3288f6b35d1085c620dd0278ed0abdaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/IHouse.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\ninterface IHouse {\\n    function distributePrize(address token, address winner, uint256 amount) external;\\n    function collectFee(address token, address lottery_owner, uint256 amount) external;\\n}\",\"keccak256\":\"0xbcfff2a98296caddc6326b0807c081cfbc8757847ee16078153cea2bd74743a6\",\"license\":\"UNLICENSED\"},\"contracts/LotteryProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./vendor/GelatoVRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./IHouse.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract LotteryProvider is Initializable, UUPSUpgradeable, OwnableUpgradeable, GelatoVRFConsumerBase {\\n    IHouse public house;\\n    address private operatorAddr;\\n    \\n    struct Lottery {\\n        address entrance_token_address;\\n        uint128 fee_amount_per_ticket;\\n        uint128 ticket_price;\\n        uint32 max_tickets;\\n        uint32 sold_tickets;\\n        bool is_active;\\n        address[] participants;\\n        address winner;\\n    }\\n\\n    mapping(bytes32 => Lottery) public lotteries; // lottery_id => lottery\\n\\n    event LotteryOpened(bytes32 indexed lottery_id, uint128 ticket_price, uint128 fee_amount_per_ticket, uint32 max_tickets);\\n    event LotteryClosed(bytes32 indexed lottery_id);\\n    event TicketBought(bytes32 indexed lottery_id, address indexed buyer, uint32 tickets);\\n    event WinnerPaid(bytes32 indexed lottery_id, address indexed winner, uint256 amount);\\n    event LotteryNumberGenerated(address indexed requester, uint256 rNumber);\\n    event LotteryCanceled(bytes32 indexed lottery_id);\\n    event FeeCollected(address indexed collector, uint256 amount);\\n    event LotteryProviderUpdated(address indexed lottery_provider);\\n\\n    constructor(address _operatorAddr) {\\n        require(_operatorAddr != address(0), \\\"Invalid operator address\\\");\\n        operatorAddr = _operatorAddr;\\n    }\\n\\n    function version() public pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n    \\n    function initialize() public initializer {\\n        __Ownable_init(msg.sender);\\n    }\\n    \\n    function setHouse(address _houseAddrs) external onlyOwner {\\n        require(_houseAddrs != address(0), \\\"Invalid house address\\\");\\n        house = IHouse(_houseAddrs);\\n    }\\n\\n    function getOperator() external view returns (address) {\\n        return operatorAddr;\\n    }\\n\\n    function _operator() internal view override returns (address) {\\n        return operatorAddr;\\n    }\\n\\n    function createLottery(\\n        bytes32 lottery_id,\\n        address _entrance_token_address,\\n        uint128 _ticket_price,\\n        uint128 _fee_amount_per_ticket,\\n        uint32 _max_tickets\\n    ) external onlyOwner {\\n        require(lotteries[lottery_id].max_tickets == 0, \\\"Lottery already exists\\\");\\n\\n        lotteries[lottery_id] = Lottery({\\n            entrance_token_address: _entrance_token_address,\\n            ticket_price: _ticket_price,\\n            fee_amount_per_ticket: _fee_amount_per_ticket,\\n            max_tickets: _max_tickets,\\n            sold_tickets: 0,\\n            is_active: true,\\n            participants: new address[](0),\\n            winner: address(0)\\n        });\\n\\n        emit LotteryOpened(lottery_id, _ticket_price, _fee_amount_per_ticket, _max_tickets);\\n    }\\n\\n    function buyTicket(bytes32 lottery_id, uint32 ticket_count) external {\\n        Lottery storage lottery = lotteries[lottery_id];\\n        require(lottery.is_active, \\\"Lottery is closed\\\");\\n        require(lottery.sold_tickets + ticket_count <= lottery.max_tickets, \\\"Not enough tickets available\\\");\\n\\n        uint256 cost = ticket_count * lottery.ticket_price;\\n        require(IERC20(lottery.entrance_token_address).transferFrom(msg.sender, address(house), cost), \\\"Payment failed\\\");\\n\\n        for (uint32 i = 0; i < ticket_count; i++) {\\n            lottery.participants.push(msg.sender);\\n        }\\n\\n        lottery.sold_tickets += ticket_count;\\n        emit TicketBought(lottery_id, msg.sender, ticket_count);\\n    }\\n    \\n    function numberOfTicketsByAddress(bytes32 lottery_id, address participant) external view returns (uint32) {\\n        Lottery storage lottery = lotteries[lottery_id];\\n        require(lottery.is_active, \\\"Lottery is closed\\\");\\n        \\n        uint32 tickets = 0;\\n        for (uint32 i = 0; i < lottery.participants.length; i++) {\\n            if (lottery.participants[i] == participant) {\\n                tickets++;\\n            }\\n        }\\n        return tickets;\\n    }\\n    \\n    function requestCloseLottery(bytes32 lottery_id) external onlyOwner {\\n        require(lotteries[lottery_id].max_tickets > 0, \\\"Lottery does not exist\\\");\\n        require(lotteries[lottery_id].is_active, \\\"Lottery is not active\\\");\\n        require(lotteries[lottery_id].sold_tickets > 0, \\\"No participants\\\");\\n\\n        _requestRandomness(abi.encode(lottery_id));\\n    }\\n\\n    function _fulfillRandomness(uint256 randomness, uint256, bytes memory extraData) internal override {\\n        require(msg.sender == _operator(), \\\"Only operator can fulfill randomness\\\");\\n        bytes32 lottery_id = abi.decode(extraData, (bytes32));\\n        emit LotteryNumberGenerated(msg.sender, randomness);\\n        \\n        _closeLottery(lottery_id);\\n        _selectAndDistributeWinner(lottery_id, randomness);\\n    }\\n    \\n    function _closeLottery(bytes32 lottery_id) internal {\\n        Lottery storage lottery = lotteries[lottery_id];\\n        require(lottery.is_active, \\\"Lottery already closed\\\");\\n\\n        lottery.is_active = false;\\n        emit LotteryClosed(lottery_id);\\n    }\\n\\n    function _selectAndDistributeWinner(bytes32 lottery_id, uint256 random_number) internal {\\n        Lottery storage lottery = lotteries[lottery_id];\\n        require(!lottery.is_active, \\\"Lottery must be closed first\\\");\\n        require(lottery.sold_tickets > 0, \\\"No participants\\\");\\n\\n        uint256 winnerIndex = random_number % lottery.sold_tickets;\\n        address winner = lottery.participants[winnerIndex];\\n        lottery.winner = winner;\\n\\n        uint256 prizePool = lottery.ticket_price * lottery.sold_tickets;\\n        uint256 feeAmount = lottery.fee_amount_per_ticket * lottery.sold_tickets;\\n        uint256 prizeAmount = prizePool - feeAmount;\\n\\n        // Distribute prize to winner\\n        house.distributePrize(lottery.entrance_token_address, winner, prizeAmount);\\n        \\n        house.collectFee(lottery.entrance_token_address, owner(), feeAmount);\\n        emit FeeCollected(owner(), feeAmount);\\n        emit WinnerPaid(lottery_id, winner, prizeAmount);\\n    }\\n    \\n    function cancelLottery(bytes32 lottery_id) external onlyOwner {\\n        Lottery storage lottery = lotteries[lottery_id];\\n        require(lottery.is_active, \\\"Lottery is already closed\\\");\\n\\n        // Refund participants\\n        for (uint256 i = 0; i < lottery.participants.length; i++) {\\n            IERC20(lottery.entrance_token_address).transfer(lottery.participants[i], lottery.ticket_price);\\n        }\\n\\n        lottery.is_active = false;\\n        emit LotteryCanceled(lottery_id);\\n    }\\n\\n    function recoverERC20(address token_address, uint256 amount) external onlyOwner {\\n        require(token_address != address(0), \\\"Invalid token address\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        require(IERC20(token_address).transfer(owner(), amount), \\\"Withdrawal failed\\\");\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\",\"keccak256\":\"0x1a63dc63fe9c43df2e71fb33fded80450d0262005df9fe0ea988d2232b7c022b\",\"license\":\"UNLICENSED\"},\"contracts/vendor/GelatoVRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {IGelatoVRFConsumer} from \\\"./IGelatoVRFConsumer.sol\\\";\\n\\n/// @title GelatoVRFConsumerBase\\n/// @dev This contract handles domain separation between consecutive randomness requests\\n/// The contract has to be implemented by contracts willing to use the gelato VRF system.\\n/// This base contract enhances the GelatoVRFConsumer by introducing request IDs and\\n/// ensuring unique random values.\\n/// for different request IDs by hashing them with the random number provided by drand.\\n/// For security considerations, refer to the Gelato documentation.\\nabstract contract GelatoVRFConsumerBase is IGelatoVRFConsumer {\\n    uint256 private constant _PERIOD = 3;\\n    uint256 private constant _GENESIS = 1692803367;\\n    bool[] public requestPending;\\n    mapping(uint256 => bytes32) public requestedHash;\\n\\n    /// @notice Returns the address of the dedicated msg.sender.\\n    /// @dev The operator can be found on the Gelato dashboard after a VRF is deployed.\\n    /// @return Address of the operator.\\n    function _operator() internal view virtual returns (address);\\n\\n    /// @notice User logic to handle the random value received.\\n    /// @param randomness The random number generated by Gelato VRF.\\n    /// @param requestId The ID for the randomness request.\\n    /// @param extraData Additional data from the randomness request.\\n    function _fulfillRandomness(\\n        uint256 randomness,\\n        uint256 requestId,\\n        bytes memory extraData\\n    ) internal virtual;\\n\\n    /// @notice Requests randomness from the Gelato VRF.\\n    /// @dev The extraData parameter allows for additional data to be passed to\\n    /// the VRF, which is then forwarded to the callback. This is useful for\\n    /// request tracking purposes if requestId is not enough.\\n    /// @param extraData Additional data for the randomness request.\\n    /// @return requestId The ID for the randomness request.\\n    function _requestRandomness(\\n        bytes memory extraData\\n    ) internal returns (uint256 requestId) {\\n        requestId = uint256(requestPending.length);\\n        requestPending.push();\\n        requestPending[requestId] = true;\\n\\n        bytes memory data = abi.encode(requestId, extraData);\\n        uint256 round = _round();\\n\\n        bytes memory dataWithRound = abi.encode(round, data);\\n        bytes32 requestHash = keccak256(dataWithRound);\\n\\n        requestedHash[requestId] = requestHash;\\n\\n        emit RequestedRandomness(round, data);\\n    }\\n\\n    /// @notice Callback function used by Gelato VRF to return the random number.\\n    /// The randomness is derived by hashing the provided randomness with the request ID.\\n    /// @param randomness The random number generated by Gelato VRF.\\n    /// @param dataWithRound Additional data provided by Gelato VRF containing request details.\\n    function fulfillRandomness(\\n        uint256 randomness,\\n        bytes calldata dataWithRound\\n    ) external {\\n        require(msg.sender == _operator(), \\\"only operator\\\");\\n\\n        (, bytes memory data) = abi.decode(dataWithRound, (uint256, bytes));\\n        (uint256 requestId, bytes memory extraData) = abi.decode(\\n            data,\\n            (uint256, bytes)\\n        );\\n\\n        bytes32 requestHash = keccak256(dataWithRound);\\n        bool isValidRequestHash = requestHash == requestedHash[requestId];\\n\\n        require(requestPending[requestId], \\\"request fulfilled or missing\\\");\\n\\n        if (isValidRequestHash) {\\n            randomness = uint256(\\n                keccak256(\\n                    abi.encode(\\n                        randomness,\\n                        address(this),\\n                        block.chainid,\\n                        requestId\\n                    )\\n                )\\n            );\\n\\n            _fulfillRandomness(randomness, requestId, extraData);\\n            requestPending[requestId] = false;\\n        }\\n    }\\n\\n    /// @notice Computes and returns the round number of drand to request randomness from.\\n    function _round() private view returns (uint256 round) {\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 elapsedFromGenesis = block.timestamp - _GENESIS;\\n        uint256 currentRound = (elapsedFromGenesis / _PERIOD) + 1;\\n\\n        round = block.chainid == 1 ? currentRound + 4 : currentRound + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x750b4c3060d223dc2c0fa0d4e04b22ed2f5f8b4bfa2bdcfe6b4d28fe0cc10103\",\"license\":\"MIT\"},\"contracts/vendor/IGelatoVRFConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title IGelatoVRFConsumer\\n/// @dev Interface for consuming random number provided by Drand.\\n/// @notice This interface allows contracts to receive a random number provided by Gelato VRF.\\ninterface IGelatoVRFConsumer {\\n    /// @notice Event emitted when a randomness request is made.\\n    /// @param data The round of randomness to request.\\n    /// @param data Additional data associated with the request.\\n    event RequestedRandomness(uint256 round, bytes data);\\n\\n    /// @notice Callback function used by Gelato to return the random number.\\n    /// @dev The random number is fetched from one among many drand endpoints\\n    /// and passed back to this function like in a Gelato Web3 Function.\\n    /// @param randomness The random number generated by drand.\\n    /// @param data Additional data provided by Gelato VRF or the user, typically unused.\\n    function fulfillRandomness(\\n        uint256 randomness,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x20c7b50002056562ccedaa59bfb6e24225978d15229ecedc007d933130827f87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346100da57601f61218638819003918201601f19168301916001600160401b038311848410176100de578084926020946040528339810103126100da57516001600160a01b038116908190036100da5730608052801561009557600380546001600160a01b03191691909117905560405161209390816100f382396080518181816114180152818161150601526117980152f35b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206f70657261746f72206164647265737300000000000000006044820152606490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f803560e01c806313a6b85c1461192c5780633659cfe6146117735780634f1ef286146114c857806352d1902d1461140657806354fd4d50146113bd578063619fcef31461130f578063715018a6146112a857806375ce7fff1461126c5780637d45019d14610fa45780637f2a8a8014610f205780638129fc1c14610dfe5780638980f11f14610c9d5780638da5cb5b14610c69578063915c72c714610be0578063b3f6b99a14610696578063c4f8f27b1461066c578063e7f43c6814610643578063e8741b60146103ac578063f2fde38b1461037f578063fa30ac671461012c5763ff9b3acf14610101575f80fd5b346101295780600319360112610129576002546040516001600160a01b039091168152602090f35b80fd5b5034610129576040366003190112610129576004356024906024359163ffffffff908184169384810361037b5783865260209260048452604087206002810193845461017d60ff8260401c16611d2a565b838061018d8782858c1c16611e42565b9216911611610336576001916001600160801b036101b2600183015460801c8b611e5a565b82546002546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152929093166044830152899082908416818f816064810103925af190811561032b578c916102fe575b50156102c85760039182018b5b8b8782161061027d578c8c8c7f2d3924e319d5bc8c71d87ceb03b6a4563995df1411ac3eb694f96023b5cb55c88d6102718e6102508f8f8354861c16611e42565b67ffffffff0000000082549160201b169067ffffffff000000001916179055565b6040519384523393a380f35b8154600160401b8110156102b557879161029d8289809401865585611c3b565b815490881b908733831b921b1916179055011661020f565b634e487b7160e01b8e526041600452858efd5b60405162461bcd60e51b815260048101899052600e60248201526d14185e5b595b9d0819985a5b195960921b6044820152606490fd5b61031e9150893d8b11610324575b6103168183611b15565b810190611c50565b5f610202565b503d61030c565b6040513d8e823e3d90fd5b60405162461bcd60e51b815260048101879052601c60248201527f4e6f7420656e6f756768207469636b65747320617661696c61626c65000000006044820152606490fd5b5f80fd5b5034610129576020366003190112610129576103a961039c611a81565b6103a4611e78565b611dd1565b80f35b5034610129576020908160031936011261012957600435916103cc611e78565b8282526004815263ffffffff8060026040852001541615610605578383526004825260ff600260408520015460401c16156105c85761041e90848452600483526002604085200154831c161515611d93565b604051928184015280835261043283611af9565b8154600160401b8110156105b45761048d9360018201845561045382611bed565b505061045e82611bed565b81549060031b9060ff6001831b921b191617905560405194859183858401526040808401526060830190611bc8565b03906104a1601f1992838101875286611b15565b6364e62126194201428111610554576003900460018101908181116105a0574660010361056857600501809111610554579461054e917fd91fc3685b930310b008ec37d2334870cab88a023ed8cc628a2e2ccd4e55d2029596935b604051610529878201928784526040808401528261051d6060820188611bc8565b03908101835282611b15565b5190209087526001855260408720556040805194859485528401526040830190611bc8565b0390a180f35b634e487b7160e01b85526011600452602485fd5b600201809111610554579461054e917fd91fc3685b930310b008ec37d2334870cab88a023ed8cc628a2e2ccd4e55d2029596936104fc565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b81526004810183905260156024820152744c6f7474657279206973206e6f742061637469766560581b6044820152606490fd5b60405162461bcd60e51b8152600481018390526016602482015275131bdd1d195c9e48191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b50346101295780600319360112610129576003546040516001600160a01b039091168152602090f35b50346101295760203660031901126101295760406020916004358152600183522054604051908152f35b503461037b57604036600319011261037b576024803567ffffffffffffffff9182821161037b573660238301121561037b5781600401359280841161037b578383019382850136811161037b576003546001600160a01b03969087163303610bac5785604091031261037b5760448501359083821161037b578461071c92870101611b89565b9384519160209286019060408785840193031261037b57838701519660408101519086821161037b57019282603f8501121561037b57848401519161076083611b37565b9461076e6040519687611b15565b838652868601946040858301011161037b5761079a938560406107919301611ba7565b87369201611b53565b838151910120865f526001845260405f20541460ff6107b888611bed565b90549060031b1c1615610b68576107cd578780f35b6040518381019060043582523060408201524660608201528760808201526080815260a081019581871090871117610b5557908491866040525190209280518101031261037b5751928181527fba2f82d6db5b53d6132f8ec6580bbb1fbdb2b180babfbfe3556ce277716cc0db833392a2825f5260048252600260405f2001805460ff8160401c1615610b185760ff60401b1916905560405193837fe1856052347be3ef0e173fa8575a7753569daca7dc6c4c34eaf4df02143c7c8f5f80a2835f526004835260405f209460028601549060ff8260401c16610ad75750831c63ffffffff169182156108bf8115611d93565b610ac3576108d38389920660038801611c3b565b90549060031b1c169460048101866001600160601b0360a01b82541617905560018101549261091b6001600160801b03918280610913838960801c611e5a565b169616611e5a565b1691828403938411610ab0575087600254168882541690803b1561037b57604051637f32b35160e11b81526001600160a01b0392831660048201529188166024830152604482018590525f908290606490829084905af18015610aa557610a92575b5088888060025416925416915f8051602061201e833981519152928a84541690823b15610a8e5760405163328dc65b60e11b81526001600160a01b03918216600482015291166024820152604481018590529082908290606490829084905af18015610a8357610a63575b5050907f06c5efeff5c320943d265dc4e5f1af95ad523555ce0c1957e367dda5514572df84610a4b997fadf5557d73276c2e92ffbef8f837ff484b31dd14a5f9ae61f5d956009ae617dc969594541692604051908152a2604051908152a3611bed565b60ff82549160031b1b191690555f8080808080808780f35b610a71909594939295611aad565b610a7f57909192885f6109e8565b8880fd5b6040513d84823e3d90fd5b8380fd5b610a9d919950611aad565b5f975f61097d565b6040513d5f823e3d90fd5b634e487b7160e01b5f9081526011600452fd5b50634e487b7160e01b5f9081526012600452fd5b62461bcd60e51b815260048101859052601c838201527f4c6f7474657279206d75737420626520636c6f736564206669727374000000006044820152606490fd5b60405162461bcd60e51b81526004810185905260168188015275131bdd1d195c9e48185b1c9958591e4818db1bdcd95960521b6044820152606490fd5b86634e487b7160e01b5f5260416004525ffd5b60405162461bcd60e51b815260048101859052601c818801527f726571756573742066756c66696c6c6564206f72206d697373696e67000000006044820152606490fd5b60405162461bcd60e51b815260206004820152600d818701526c37b7363c9037b832b930ba37b960991b6044820152606490fd5b3461037b57602036600319011261037b576004355f52600460205260e060405f2060018060a01b039060ff8282541692600183015492600281015491600463ffffffff92015416936040519586526001600160801b038116602087015260801c604086015280821660608601528160201c16608085015260401c16151560a083015260c0820152f35b3461037b575f36600319011261037b575f8051602061201e833981519152546040516001600160a01b039091168152602090f35b3461037b57604036600319011261037b57610cb6611a81565b60243590610cc2611e78565b6001600160a01b03908116918215610dc1578015610d7c5760446020925f8051602061201e83398151915254165f604051958694859363a9059cbb60e01b8552600485015260248401525af1908115610aa5575f91610d5d575b5015610d2457005b60405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606490fd5b610d76915060203d602011610324576103168183611b15565b81610d1c565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b3461037b575f36600319011261037b577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805460ff8160401c16159067ffffffffffffffff811680159081610f18575b6001149081610f0e575b159081610f05575b50610ef35767ffffffffffffffff198116600117835581610ed4575b50610e85611f3f565b610e8d611f3f565b610e9633611dd1565b610e9c57005b60ff60401b1981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff19166801000000000000000117825582610e7c565b60405163f92ee8a960e01b8152600490fd5b90501584610e60565b303b159150610e58565b839150610e4e565b3461037b57602036600319011261037b57610f39611a81565b610f41611e78565b6001600160a01b03168015610f67576001600160601b0360a01b60025416176002555f80f35b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420686f757365206164647265737360581b6044820152606490fd5b3461037b5760a036600319011261037b57610fbd611a97565b604435906001600160801b03821680920361037b576064356001600160801b03811680910361037b576084359163ffffffff831680930361037b57611000611e78565b6004355f52600460205263ffffffff600260405f2001541661122e5760405161102881611ac1565b5f815260405191610100830183811067ffffffffffffffff82111761121a5760405260018060a01b031682528260208301528460408301528360608301525f6080830152600160a083015260c08201525f60e08201526004355f52600460205260405f2060018060a01b03825116906001600160601b0360a01b91828254161781556001600160801b036020840151166001600160801b0319604085015160801b161760018201556002810163ffffffff60608501511663ffffffff1982541617815561111c63ffffffff608086015116829067ffffffff0000000082549160201b169067ffffffff000000001916179055565b60a0840151815460ff60401b191690151560401b60ff60401b1617905560c0830151805190600383019067ffffffffffffffff831161121a57600160401b831161121a5781548383558084106111f4575b50602001905f5260205f205f5b8381106111d757505050506004019160e060018060a01b039101511690825416179055604051928352602083015260408201527f751d18dce70b3ed02a74f47b7ffd12dfc46b0db86b79faa3478359b906c8cd60606060043592a2005b82516001600160a01b03168183015560209092019160010161117a565b825f528360205f2091820191015b81811061120f575061116d565b5f8155600101611202565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b81526020600482015260166024820152754c6f747465727920616c72656164792065786973747360501b6044820152606490fd5b3461037b57602036600319011261037b576004355f5481101561037b5760ff611296602092611bed565b9190546040519260031b1c1615158152f35b3461037b575f36600319011261037b576112c0611e78565b5f8051602061201e83398151915280546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461037b57604036600319011261037b57611328611a97565b6004355f52600460205260405f2061134960ff600283015460401c16611d2a565b6003908101805490925f926001600160a01b039182169190845b8463ffffffff8216106113815760208663ffffffff60405191168152f35b838361138d838a611c3b565b905490851b1c16146113a8575b6113a390611d6a565b611363565b946113b56113a391611d6a565b95905061139a565b3461037b575f36600319011261037b576114026040516113dc81611af9565b60058152640312e302e360dc1b6020820152604051918291602083526020830190611bc8565b0390f35b3461037b575f36600319011261037b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361145d5760206040515f8051602061203e8339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b604036600319011261037b576114dc611a81565b60243567ffffffffffffffff811161037b576114fc903690600401611b89565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116919061153530841415611c68565b6115515f8051602061203e833981519152938285541614611cc9565b611559611e78565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115915750505061158f90611eb0565b005b8316604051926352d1902d60e01b84526020938481600481865afa5f9181611744575b506116155760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b939293036116ed5761162684611eb0565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28151158015906116e5575b61165b57005b61158f925f806040519461166e86611add565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d156116dc573d6116c081611b37565b906116ce6040519283611b15565b81525f81943d92013e611f80565b60609250611f80565b506001611655565b60405162461bcd60e51b815260048101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508581813d831161176c575b61175c8183611b15565b8101031261037b575190876115b4565b503d611752565b3461037b5760208060031936011261037b5761178d611a81565b906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166117c530821415611c68565b6117e15f8051602061203e833981519152918383541614611cc9565b6117e9611e78565b604051916117f683611ac1565b5f83527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611830575050505061158f90611eb0565b8416906040516352d1902d60e01b81528481600481865afa5f91816118fd575b506118b15760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b939293036116ed576118c284611eb0565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28151158015906118f65761165b57005b505f611655565b9091508581813d8311611925575b6119158183611b15565b8101031261037b57519087611850565b503d61190b565b3461037b5760208060031936011261037b576004359061194a611e78565b815f526004815260405f20600281019160ff835460401c1615611a3d575f90600380840190600194859160018201925b6119b1575b875460ff60401b19168855887f3ba941cbd45d2da3474dd0873285e380e709781b14f2ac4a5e07f1a2832df0b45f80a2005b8354861015611a385781546001600160a01b03908116969086906119d58388611c3b565b905490851b1c166044865460801c915f6040519b8c94859363a9059cbb60e01b8552600485015260248401525af1908115610aa55788978892611a1b575b50019561197a565b611a3190883d8a11610324576103168183611b15565b508b611a13565b61197f565b6064906040519062461bcd60e51b82526004820152601960248201527f4c6f747465727920697320616c726561647920636c6f736564000000000000006044820152fd5b600435906001600160a01b038216820361037b57565b602435906001600160a01b038216820361037b57565b67ffffffffffffffff811161121a57604052565b6020810190811067ffffffffffffffff82111761121a57604052565b6060810190811067ffffffffffffffff82111761121a57604052565b6040810190811067ffffffffffffffff82111761121a57604052565b90601f8019910116810190811067ffffffffffffffff82111761121a57604052565b67ffffffffffffffff811161121a57601f01601f191660200190565b929192611b5f82611b37565b91611b6d6040519384611b15565b82948184528183011161037b578281602093845f960137010152565b9080601f8301121561037b57816020611ba493359101611b53565b90565b5f5b838110611bb85750505f910152565b8181015183820152602001611ba9565b90602091611be181518092818552858086019101611ba7565b601f01601f1916010190565b905f54821015611c27575f8052601f8260051c7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301921690565b634e487b7160e01b5f52603260045260245ffd5b8054821015611c27575f5260205f2001905f90565b9081602091031261037b5751801515810361037b5790565b15611c6f57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611cd057565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b15611d3157565b60405162461bcd60e51b8152602060048201526011602482015270131bdd1d195c9e481a5cc818db1bdcd959607a1b6044820152606490fd5b63ffffffff809116908114611d7f5760010190565b634e487b7160e01b5f52601160045260245ffd5b15611d9a57565b60405162461bcd60e51b815260206004820152600f60248201526e4e6f207061727469636970616e747360881b6044820152606490fd5b6001600160a01b03908116908115611e2a575f8051602061201e83398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b604051631e4fbdf760e01b81525f6004820152602490fd5b91909163ffffffff80809416911601918211611d7f57565b9190916001600160801b0380809416911602918216918203611d7f57565b5f8051602061201e833981519152546001600160a01b03163303611e9857565b60405163118cdaa760e01b8152336004820152602490fd5b803b15611ee4575f8051602061203e83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615611f6e57565b604051631afcd79f60e31b8152600490fd5b91929015611fe25750815115611f94575090565b3b15611f9d5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611ff55750805190602001fd5b60405162461bcd60e51b815260206004820152908190612019906024830190611bc8565b0390fdfe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220a8944c04fdd5230d795a08a50c255647530353a412dd8ff6f78e967335f8012e64736f6c63430008160033",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f803560e01c806313a6b85c1461192c5780633659cfe6146117735780634f1ef286146114c857806352d1902d1461140657806354fd4d50146113bd578063619fcef31461130f578063715018a6146112a857806375ce7fff1461126c5780637d45019d14610fa45780637f2a8a8014610f205780638129fc1c14610dfe5780638980f11f14610c9d5780638da5cb5b14610c69578063915c72c714610be0578063b3f6b99a14610696578063c4f8f27b1461066c578063e7f43c6814610643578063e8741b60146103ac578063f2fde38b1461037f578063fa30ac671461012c5763ff9b3acf14610101575f80fd5b346101295780600319360112610129576002546040516001600160a01b039091168152602090f35b80fd5b5034610129576040366003190112610129576004356024906024359163ffffffff908184169384810361037b5783865260209260048452604087206002810193845461017d60ff8260401c16611d2a565b838061018d8782858c1c16611e42565b9216911611610336576001916001600160801b036101b2600183015460801c8b611e5a565b82546002546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152929093166044830152899082908416818f816064810103925af190811561032b578c916102fe575b50156102c85760039182018b5b8b8782161061027d578c8c8c7f2d3924e319d5bc8c71d87ceb03b6a4563995df1411ac3eb694f96023b5cb55c88d6102718e6102508f8f8354861c16611e42565b67ffffffff0000000082549160201b169067ffffffff000000001916179055565b6040519384523393a380f35b8154600160401b8110156102b557879161029d8289809401865585611c3b565b815490881b908733831b921b1916179055011661020f565b634e487b7160e01b8e526041600452858efd5b60405162461bcd60e51b815260048101899052600e60248201526d14185e5b595b9d0819985a5b195960921b6044820152606490fd5b61031e9150893d8b11610324575b6103168183611b15565b810190611c50565b5f610202565b503d61030c565b6040513d8e823e3d90fd5b60405162461bcd60e51b815260048101879052601c60248201527f4e6f7420656e6f756768207469636b65747320617661696c61626c65000000006044820152606490fd5b5f80fd5b5034610129576020366003190112610129576103a961039c611a81565b6103a4611e78565b611dd1565b80f35b5034610129576020908160031936011261012957600435916103cc611e78565b8282526004815263ffffffff8060026040852001541615610605578383526004825260ff600260408520015460401c16156105c85761041e90848452600483526002604085200154831c161515611d93565b604051928184015280835261043283611af9565b8154600160401b8110156105b45761048d9360018201845561045382611bed565b505061045e82611bed565b81549060031b9060ff6001831b921b191617905560405194859183858401526040808401526060830190611bc8565b03906104a1601f1992838101875286611b15565b6364e62126194201428111610554576003900460018101908181116105a0574660010361056857600501809111610554579461054e917fd91fc3685b930310b008ec37d2334870cab88a023ed8cc628a2e2ccd4e55d2029596935b604051610529878201928784526040808401528261051d6060820188611bc8565b03908101835282611b15565b5190209087526001855260408720556040805194859485528401526040830190611bc8565b0390a180f35b634e487b7160e01b85526011600452602485fd5b600201809111610554579461054e917fd91fc3685b930310b008ec37d2334870cab88a023ed8cc628a2e2ccd4e55d2029596936104fc565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b81526004810183905260156024820152744c6f7474657279206973206e6f742061637469766560581b6044820152606490fd5b60405162461bcd60e51b8152600481018390526016602482015275131bdd1d195c9e48191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b50346101295780600319360112610129576003546040516001600160a01b039091168152602090f35b50346101295760203660031901126101295760406020916004358152600183522054604051908152f35b503461037b57604036600319011261037b576024803567ffffffffffffffff9182821161037b573660238301121561037b5781600401359280841161037b578383019382850136811161037b576003546001600160a01b03969087163303610bac5785604091031261037b5760448501359083821161037b578461071c92870101611b89565b9384519160209286019060408785840193031261037b57838701519660408101519086821161037b57019282603f8501121561037b57848401519161076083611b37565b9461076e6040519687611b15565b838652868601946040858301011161037b5761079a938560406107919301611ba7565b87369201611b53565b838151910120865f526001845260405f20541460ff6107b888611bed565b90549060031b1c1615610b68576107cd578780f35b6040518381019060043582523060408201524660608201528760808201526080815260a081019581871090871117610b5557908491866040525190209280518101031261037b5751928181527fba2f82d6db5b53d6132f8ec6580bbb1fbdb2b180babfbfe3556ce277716cc0db833392a2825f5260048252600260405f2001805460ff8160401c1615610b185760ff60401b1916905560405193837fe1856052347be3ef0e173fa8575a7753569daca7dc6c4c34eaf4df02143c7c8f5f80a2835f526004835260405f209460028601549060ff8260401c16610ad75750831c63ffffffff169182156108bf8115611d93565b610ac3576108d38389920660038801611c3b565b90549060031b1c169460048101866001600160601b0360a01b82541617905560018101549261091b6001600160801b03918280610913838960801c611e5a565b169616611e5a565b1691828403938411610ab0575087600254168882541690803b1561037b57604051637f32b35160e11b81526001600160a01b0392831660048201529188166024830152604482018590525f908290606490829084905af18015610aa557610a92575b5088888060025416925416915f8051602061201e833981519152928a84541690823b15610a8e5760405163328dc65b60e11b81526001600160a01b03918216600482015291166024820152604481018590529082908290606490829084905af18015610a8357610a63575b5050907f06c5efeff5c320943d265dc4e5f1af95ad523555ce0c1957e367dda5514572df84610a4b997fadf5557d73276c2e92ffbef8f837ff484b31dd14a5f9ae61f5d956009ae617dc969594541692604051908152a2604051908152a3611bed565b60ff82549160031b1b191690555f8080808080808780f35b610a71909594939295611aad565b610a7f57909192885f6109e8565b8880fd5b6040513d84823e3d90fd5b8380fd5b610a9d919950611aad565b5f975f61097d565b6040513d5f823e3d90fd5b634e487b7160e01b5f9081526011600452fd5b50634e487b7160e01b5f9081526012600452fd5b62461bcd60e51b815260048101859052601c838201527f4c6f7474657279206d75737420626520636c6f736564206669727374000000006044820152606490fd5b60405162461bcd60e51b81526004810185905260168188015275131bdd1d195c9e48185b1c9958591e4818db1bdcd95960521b6044820152606490fd5b86634e487b7160e01b5f5260416004525ffd5b60405162461bcd60e51b815260048101859052601c818801527f726571756573742066756c66696c6c6564206f72206d697373696e67000000006044820152606490fd5b60405162461bcd60e51b815260206004820152600d818701526c37b7363c9037b832b930ba37b960991b6044820152606490fd5b3461037b57602036600319011261037b576004355f52600460205260e060405f2060018060a01b039060ff8282541692600183015492600281015491600463ffffffff92015416936040519586526001600160801b038116602087015260801c604086015280821660608601528160201c16608085015260401c16151560a083015260c0820152f35b3461037b575f36600319011261037b575f8051602061201e833981519152546040516001600160a01b039091168152602090f35b3461037b57604036600319011261037b57610cb6611a81565b60243590610cc2611e78565b6001600160a01b03908116918215610dc1578015610d7c5760446020925f8051602061201e83398151915254165f604051958694859363a9059cbb60e01b8552600485015260248401525af1908115610aa5575f91610d5d575b5015610d2457005b60405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606490fd5b610d76915060203d602011610324576103168183611b15565b81610d1c565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b3461037b575f36600319011261037b577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805460ff8160401c16159067ffffffffffffffff811680159081610f18575b6001149081610f0e575b159081610f05575b50610ef35767ffffffffffffffff198116600117835581610ed4575b50610e85611f3f565b610e8d611f3f565b610e9633611dd1565b610e9c57005b60ff60401b1981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff19166801000000000000000117825582610e7c565b60405163f92ee8a960e01b8152600490fd5b90501584610e60565b303b159150610e58565b839150610e4e565b3461037b57602036600319011261037b57610f39611a81565b610f41611e78565b6001600160a01b03168015610f67576001600160601b0360a01b60025416176002555f80f35b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420686f757365206164647265737360581b6044820152606490fd5b3461037b5760a036600319011261037b57610fbd611a97565b604435906001600160801b03821680920361037b576064356001600160801b03811680910361037b576084359163ffffffff831680930361037b57611000611e78565b6004355f52600460205263ffffffff600260405f2001541661122e5760405161102881611ac1565b5f815260405191610100830183811067ffffffffffffffff82111761121a5760405260018060a01b031682528260208301528460408301528360608301525f6080830152600160a083015260c08201525f60e08201526004355f52600460205260405f2060018060a01b03825116906001600160601b0360a01b91828254161781556001600160801b036020840151166001600160801b0319604085015160801b161760018201556002810163ffffffff60608501511663ffffffff1982541617815561111c63ffffffff608086015116829067ffffffff0000000082549160201b169067ffffffff000000001916179055565b60a0840151815460ff60401b191690151560401b60ff60401b1617905560c0830151805190600383019067ffffffffffffffff831161121a57600160401b831161121a5781548383558084106111f4575b50602001905f5260205f205f5b8381106111d757505050506004019160e060018060a01b039101511690825416179055604051928352602083015260408201527f751d18dce70b3ed02a74f47b7ffd12dfc46b0db86b79faa3478359b906c8cd60606060043592a2005b82516001600160a01b03168183015560209092019160010161117a565b825f528360205f2091820191015b81811061120f575061116d565b5f8155600101611202565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b81526020600482015260166024820152754c6f747465727920616c72656164792065786973747360501b6044820152606490fd5b3461037b57602036600319011261037b576004355f5481101561037b5760ff611296602092611bed565b9190546040519260031b1c1615158152f35b3461037b575f36600319011261037b576112c0611e78565b5f8051602061201e83398151915280546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461037b57604036600319011261037b57611328611a97565b6004355f52600460205260405f2061134960ff600283015460401c16611d2a565b6003908101805490925f926001600160a01b039182169190845b8463ffffffff8216106113815760208663ffffffff60405191168152f35b838361138d838a611c3b565b905490851b1c16146113a8575b6113a390611d6a565b611363565b946113b56113a391611d6a565b95905061139a565b3461037b575f36600319011261037b576114026040516113dc81611af9565b60058152640312e302e360dc1b6020820152604051918291602083526020830190611bc8565b0390f35b3461037b575f36600319011261037b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361145d5760206040515f8051602061203e8339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b604036600319011261037b576114dc611a81565b60243567ffffffffffffffff811161037b576114fc903690600401611b89565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116919061153530841415611c68565b6115515f8051602061203e833981519152938285541614611cc9565b611559611e78565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115915750505061158f90611eb0565b005b8316604051926352d1902d60e01b84526020938481600481865afa5f9181611744575b506116155760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b939293036116ed5761162684611eb0565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28151158015906116e5575b61165b57005b61158f925f806040519461166e86611add565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d156116dc573d6116c081611b37565b906116ce6040519283611b15565b81525f81943d92013e611f80565b60609250611f80565b506001611655565b60405162461bcd60e51b815260048101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508581813d831161176c575b61175c8183611b15565b8101031261037b575190876115b4565b503d611752565b3461037b5760208060031936011261037b5761178d611a81565b906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166117c530821415611c68565b6117e15f8051602061203e833981519152918383541614611cc9565b6117e9611e78565b604051916117f683611ac1565b5f83527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611830575050505061158f90611eb0565b8416906040516352d1902d60e01b81528481600481865afa5f91816118fd575b506118b15760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b939293036116ed576118c284611eb0565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28151158015906118f65761165b57005b505f611655565b9091508581813d8311611925575b6119158183611b15565b8101031261037b57519087611850565b503d61190b565b3461037b5760208060031936011261037b576004359061194a611e78565b815f526004815260405f20600281019160ff835460401c1615611a3d575f90600380840190600194859160018201925b6119b1575b875460ff60401b19168855887f3ba941cbd45d2da3474dd0873285e380e709781b14f2ac4a5e07f1a2832df0b45f80a2005b8354861015611a385781546001600160a01b03908116969086906119d58388611c3b565b905490851b1c166044865460801c915f6040519b8c94859363a9059cbb60e01b8552600485015260248401525af1908115610aa55788978892611a1b575b50019561197a565b611a3190883d8a11610324576103168183611b15565b508b611a13565b61197f565b6064906040519062461bcd60e51b82526004820152601960248201527f4c6f747465727920697320616c726561647920636c6f736564000000000000006044820152fd5b600435906001600160a01b038216820361037b57565b602435906001600160a01b038216820361037b57565b67ffffffffffffffff811161121a57604052565b6020810190811067ffffffffffffffff82111761121a57604052565b6060810190811067ffffffffffffffff82111761121a57604052565b6040810190811067ffffffffffffffff82111761121a57604052565b90601f8019910116810190811067ffffffffffffffff82111761121a57604052565b67ffffffffffffffff811161121a57601f01601f191660200190565b929192611b5f82611b37565b91611b6d6040519384611b15565b82948184528183011161037b578281602093845f960137010152565b9080601f8301121561037b57816020611ba493359101611b53565b90565b5f5b838110611bb85750505f910152565b8181015183820152602001611ba9565b90602091611be181518092818552858086019101611ba7565b601f01601f1916010190565b905f54821015611c27575f8052601f8260051c7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301921690565b634e487b7160e01b5f52603260045260245ffd5b8054821015611c27575f5260205f2001905f90565b9081602091031261037b5751801515810361037b5790565b15611c6f57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611cd057565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b15611d3157565b60405162461bcd60e51b8152602060048201526011602482015270131bdd1d195c9e481a5cc818db1bdcd959607a1b6044820152606490fd5b63ffffffff809116908114611d7f5760010190565b634e487b7160e01b5f52601160045260245ffd5b15611d9a57565b60405162461bcd60e51b815260206004820152600f60248201526e4e6f207061727469636970616e747360881b6044820152606490fd5b6001600160a01b03908116908115611e2a575f8051602061201e83398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b604051631e4fbdf760e01b81525f6004820152602490fd5b91909163ffffffff80809416911601918211611d7f57565b9190916001600160801b0380809416911602918216918203611d7f57565b5f8051602061201e833981519152546001600160a01b03163303611e9857565b60405163118cdaa760e01b8152336004820152602490fd5b803b15611ee4575f8051602061203e83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615611f6e57565b604051631afcd79f60e31b8152600490fd5b91929015611fe25750815115611f94575090565b3b15611f9d5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611ff55750805190602001fd5b60405162461bcd60e51b815260206004820152908190612019906024830190611bc8565b0390fdfe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220a8944c04fdd5230d795a08a50c255647530353a412dd8ff6f78e967335f8012e64736f6c63430008160033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is upgraded."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RequestedRandomness(uint256,bytes)": {
        "params": {
          "data": "Additional data associated with the request."
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "fulfillRandomness(uint256,bytes)": {
        "params": {
          "dataWithRound": "Additional data provided by Gelato VRF containing request details.",
          "randomness": "The random number generated by Gelato VRF."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RequestedRandomness(uint256,bytes)": {
        "notice": "Event emitted when a randomness request is made."
      }
    },
    "kind": "user",
    "methods": {
      "fulfillRandomness(uint256,bytes)": {
        "notice": "Callback function used by Gelato VRF to return the random number. The randomness is derived by hashing the provided randomness with the request ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2519,
        "contract": "contracts/LotteryProvider.sol:LotteryProvider",
        "label": "requestPending",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bool)dyn_storage"
      },
      {
        "astId": 2523,
        "contract": "contracts/LotteryProvider.sol:LotteryProvider",
        "label": "requestedHash",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1804,
        "contract": "contracts/LotteryProvider.sol:LotteryProvider",
        "label": "house",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IHouse)1786"
      },
      {
        "astId": 1806,
        "contract": "contracts/LotteryProvider.sol:LotteryProvider",
        "label": "operatorAddr",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1829,
        "contract": "contracts/LotteryProvider.sol:LotteryProvider",
        "label": "lotteries",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Lottery)1824_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IHouse)1786": {
        "encoding": "inplace",
        "label": "contract IHouse",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(Lottery)1824_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LotteryProvider.Lottery)",
        "numberOfBytes": "32",
        "value": "t_struct(Lottery)1824_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Lottery)1824_storage": {
        "encoding": "inplace",
        "label": "struct LotteryProvider.Lottery",
        "members": [
          {
            "astId": 1808,
            "contract": "contracts/LotteryProvider.sol:LotteryProvider",
            "label": "entrance_token_address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1810,
            "contract": "contracts/LotteryProvider.sol:LotteryProvider",
            "label": "fee_amount_per_ticket",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 1812,
            "contract": "contracts/LotteryProvider.sol:LotteryProvider",
            "label": "ticket_price",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 1814,
            "contract": "contracts/LotteryProvider.sol:LotteryProvider",
            "label": "max_tickets",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1816,
            "contract": "contracts/LotteryProvider.sol:LotteryProvider",
            "label": "sold_tickets",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1818,
            "contract": "contracts/LotteryProvider.sol:LotteryProvider",
            "label": "is_active",
            "offset": 8,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1821,
            "contract": "contracts/LotteryProvider.sol:LotteryProvider",
            "label": "participants",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1823,
            "contract": "contracts/LotteryProvider.sol:LotteryProvider",
            "label": "winner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}